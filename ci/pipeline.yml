groups: []
resources:
- name: amazon-vpc-cni-k8s
  type: github-release
  icon: github-circle
  source:
    access_token: ((github-public-repo-personal-access-token))
    owner: aws
    repository: amazon-vpc-cni-k8s
- name: aws-servicebroker
  type: github-release
  icon: github-circle
  source:
    access_token: ((github-public-repo-personal-access-token))
    owner: awslabs
    repository: aws-servicebroker
- name: deploy-src
  type: git
  icon: git
  source:
    branch: master
    uri: https://github.com/govau/cga-deploy-k8s
- name: charts
  type: git
  icon: git
  source:
    branch: master
    uri: https://github.com/helm/charts
- name: ops-terraform
  type: git
  icon: git
  source:
    branch: master
    paths:
    - terraform/*.tf
    - terraform/**/*.tf
    - terraform/*.pub
    - terraform/**/*.pub
    - terraform/*.tpl
    - terraform/**/*.tpl
    private_key: ((ops-git-deploy-key.private_key))
    uri: git@github.com:AusDTO/ops.git
- name: ops-installer
  type: git
  icon: git
  source:
    branch: master
    paths:
    - terraform/modules/platform/installer/**
    - aws-servicebroker/**
    private_key: ((ops-git-deploy-key.private_key))
    uri: git@github.com:AusDTO/ops.git
- name: service-catalog
  icon: github-circle
  type: github-release
  source:
    access_token: ((github-public-repo-personal-access-token))
    owner: kubernetes-incubator
    repository: service-catalog
- name: tfplan-l
  type: s3
  source:
    access_key_id: ((aws_access_key_id))
    bucket: ((aws_concourse_terraform_bucket))
    region_name: ap-southeast-2
    secret_access_key: ((aws_secret_access_key))
    server_side_encryption: AES256
    versioned_file: l-cld/terraform.tfplan
- name: 7pm
  type: time
  source:
    start: 7:00 PM
    stop: 8:00 PM
    location: Australia/Sydney
- name: eks-node-ami
  type: ami
  check_every: 1h
  source:
    aws_access_key_id: ((aws_access_key_id))
    aws_secret_access_key: ((aws_secret_access_key))
    region: ap-southeast-2
    filters:
      # It doesnt seem to be documented who the owner of the official aws images is, so
      # we use the owner of the previously published eks AMI.
      # e.g. from `aws ec2 describe-images --image-ids ami-0e07b5081bb77d540`
      # There's no guarantee it wont change in the future however.
      owner-id: "602401143452"
      is-public: true
      state: available
      name: amazon-eks-node-1.12* # Must match the eks kubernetes version
- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
- name: ami
  type: docker-image
  source:
    repository: govau/ami-resource
jobs:
- name: terraform-force-apply-k
  serial_groups:
  - k
  plan:
    - do:
      - get: ops
        trigger: true
        resource: ops-terraform
      - get: deploy-src
        trigger: true
      - get: eks-node-ami
        trigger: true
      - task: create-fake-tfplan
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: govau/cga-cli
          run:
            path: /bin/bash
            args:
            - -c
            - # noop
              # we dont do terraform plan + apply in k-cld, but a tfplan
              # input is still needed by the terraform-apply task
          outputs:
          - name: tfplan
      - task: terraform-apply
        file: deploy-src/ci/terraform-apply.yml
        params:
          AWS_ACCESS_KEY_ID: ((aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
          ENV_NAME: k
          SKIP_TERRAFORM_PLAN: 1
      on_failure:
        put: slack
        params:
          text: |
            :x: :terraform: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME FAILED
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

- name: deploy-k
  serial_groups:
  - k
  plan:
  - do:
    - get: amazon-vpc-cni-k8s
      trigger: true
      params:
        include_source_tarball: true
    - get: aws-servicebroker
      trigger: true
    - get: ops
      resource: ops-installer
      trigger: true
    - get: deploy-src
      trigger: true
    - get: charts
    - get: service-catalog
      trigger: true
    - task: deploy
      file: deploy-src/ci/deploy.yml
      params:
        ALERTMANAGER_SLACK_API_URL: ((alertmanager_slack_api_url))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        ENV_NAME: k
        JUMPBOX_SSH_KEY: ((jumpbox-key.private_key))
        JUMPBOX_SSH_PORT: ((jumpbox-port))
        LETSENCRYPT_EMAIL: ((letsencrypt_email))
        SSO_GOOGLE_CLIENT_SECRET: ((sso_google_client_secret_k))
  on_failure:
    put: slack
    params:
      text: |
        :x: :kubernetes: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: :kubernetes: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME SUCCESS
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
- name: delete-k
  serial_groups:
  - k
  plan:
  - do:
    - get: ops
      resource: ops-terraform
    - get: deploy-src
    - get: 7pm
      trigger: true
    - task: delete-k
      file: deploy-src/ci/delete-k.yml
      params:
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
    on_failure:
      put: slack
      params:
        text: |
          :x: :trashfire: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
- name: terraform-plan-l
  serial_groups:
  - l
  plan:
  - do:
    - get: ops
      passed:
      - terraform-force-apply-k
      resource: ops-terraform
      trigger: true
    - get: deploy-src
      passed:
      - terraform-force-apply-k
      trigger: true
    - get: eks-node-ami
      passed:
      - terraform-force-apply-k
      trigger: true
    - task: terraform-plan
      file: deploy-src/ci/terraform-plan.yml
      params:
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        ENV_NAME: l
    - put: tfplan-l
      params:
        file: tfplan/terraform.tfplan
    on_failure:
      put: slack
      params:
        text: |
          :x: :terraform: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
    on_success:
      put: slack
      params:
        text: |
          :thinking_face: :terraform: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME needs review
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        text_file: tfplan/message.txt
- name: terraform-apply-l
  serial_groups:
  - l
  plan:
  - do:
    - get: ops
      passed:
      - terraform-plan-l
      resource: ops-terraform
    - get: deploy-src
      passed:
      - terraform-plan-l
    - get: eks-node-ami
      passed:
      - terraform-plan-l
    - get: tfplan
      passed:
      - terraform-plan-l
      resource: tfplan-l
    - task: deploy-apply
      file: deploy-src/ci/terraform-apply.yml
      params:
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        ENV_NAME: l
    on_failure:
      put: slack
      params:
        text: |
          :x: :terraform: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME FAILED
          <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: :terraform: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME SUCCESS
            <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
- name: deploy-l
  serial_groups:
  - l
  plan:
  - do:
    - get: amazon-vpc-cni-k8s
      params:
        include_source_tarball: true
      passed:
      - deploy-k
    - get: aws-servicebroker
      passed:
      - deploy-k
    - get: ops
      passed:
      - deploy-k
      resource: ops-installer
    - get: deploy-src
      passed:
      - deploy-k
    - get: charts
      passed:
      - deploy-k
    - get: service-catalog
      passed:
      - deploy-k
    - task: deploy-apply
      file: deploy-src/ci/deploy.yml
      params:
        ALERTMANAGER_SLACK_API_URL: ((alertmanager_slack_api_url))
        AWS_ACCESS_KEY_ID: ((aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
        ENV_NAME: l
        JUMPBOX_SSH_KEY: ((jumpbox-key.private_key))
        JUMPBOX_SSH_PORT: ((jumpbox-port))
        LETSENCRYPT_EMAIL: ((letsencrypt_email))
        SSO_GOOGLE_CLIENT_SECRET: ((sso_google_client_secret_l))
  on_failure:
    put: slack
    params:
      text: |
        :x: :kubernetes: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: :kubernetes: $BUILD_PIPELINE_NAME $BUILD_JOB_NAME SUCCESS
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>

